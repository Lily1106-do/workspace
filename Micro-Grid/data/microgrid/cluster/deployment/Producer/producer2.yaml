# pvc template
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: microgrid-cluster-producer-producer2
  namespace: microgrid-cluster-producer
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  claimRef:
    namespace: microgrid-cluster-producer
    name: microgrid-cluster-producer-producer2
  nfs:
    server: 192.168.136.131
    path: /opt/share/microgrid/cluster/hlledger/Producer/producer2

# pvc template
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: microgrid-cluster-producer-producer2
  namespace: microgrid-cluster-producer
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 100Mi

# peer deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: microgrid-cluster-producer
  name: producer2
spec:
  replicas: 1
  selector:
    matchLabels:
      namespace: microgrid-cluster-producer
      app: hlledger
      role: peer
      peer-name: producer2
  strategy: {}
  template:
    metadata:
      labels:
        namespace: microgrid-cluster-producer
        app: hlledger
        role: peer
        peer-name: producer2
    spec:
      imagePullSecrets:
      - name: dockerhub-token
      hostAliases:
      - ip: 127.0.0.1
        hostnames:
        - "producer2.producer.cluster.microgrid"
      containers:
      - name: producer2
        image: registry.cn-hangzhou.aliyuncs.com/timechainer/hyperledger/fabric-peer:1.4.8
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - peer node start
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric
        env:
        - name: TZ
          value: "Asia/Shanghai"
        - name: CORE_PEER_ID
          value: "producer2.producer.cluster.microgrid"
        - name: CORE_PEER_ADDRESS
          value: "producer2.producer.cluster.microgrid:7051"
        - name: CORE_PEER_LISTENADDRESS
          value: "0.0.0.0:7051"
        - name: CORE_PEER_CHAINCODEADDRESS
          value: "10.103.6.188:7052"
        - name: CORE_PEER_CHAINCODELISTENADDRESS
          value: "0.0.0.0:7052"
        - name: CORE_PEER_GOSSIP_BOOTSTRAP
          value: "producer2.producer.cluster.microgrid:7051"
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: "producer2.producer.cluster.microgrid:7051"
        - name: CORE_METRICS_PROVIDER
          value: "prometheus"
        - name: CORE_OPERATIONS_LISTENADDRESS
          value: "0.0.0.0:9443"
        - name: CORE_PEER_LOCALMSPID
          value: "ProducerMSP"
        - name: CORE_VM_ENDPOINT
          value: "unix:///host/var/run/docker.sock"
        - name: CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE
          value: "bridge"
        - name: FABRIC_LOGGING_SPEC
          value: "info"
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false"
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/etc/hyperledger/fabric/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/etc/hyperledger/fabric/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/etc/hyperledger/fabric/tls/ca.crt"
        ports:
        - containerPort: 7051
        - containerPort: 7052
        - containerPort: 9443
        volumeMounts:
        - name: peer-data
          mountPath: "/etc/hyperledger/fabric/msp"
          subPath: producer2.producer.cluster.microgrid/msp
        - name: peer-data
          mountPath: "/etc/hyperledger/fabric/tls"
          subPath: producer2.producer.cluster.microgrid/tls
        - name: peer-data
          mountPath: "/etc/hyperledger/fabric/orderer.yaml"
          subPath: config/orderer.yaml
        - name: peer-data
          mountPath: "/etc/hyperledger/fabric/core.yaml"
          subPath: config/core.yaml
        - name: peer-data
          mountPath: "/var/hyperledger/production"
          subPath: production
        - name: peer-data
          mountPath: "/opt/log"
          subPath: log
        - name: peer-docker
          mountPath: "/host/var/run/docker.sock"
      volumes:
      - name: peer-data
        persistentVolumeClaim:
          claimName: microgrid-cluster-producer-producer2
      - name: peer-docker
        hostPath:
          path: /var/run/docker.sock